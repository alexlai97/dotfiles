#+TITLE: config.org

* Table of contents :TOC:
- [[#about][about]]
  - [[#doom-emacs][doom emacs]]
  - [[#notes][notes]]
  - [[#files][files]]
- [[#common][common]]
  - [[#variables-and-functions-for-org-files][variables and functions for org files]]
  - [[#user-name-and-email][user name and email]]
  - [[#line-number][line number]]
  - [[#hooks][hooks]]
  - [[#tex-engine-using-xetex][TeX engine (using xetex)]]
  - [[#org-what-programs-to-open-file][org what programs to open file]]
  - [[#org-todo-keywords-faces][org todo-keywords, faces]]
- [[#ui][UI]]
  - [[#font][font]]
  - [[#theme][theme]]
- [[#packages][packages]]
  - [[#org-capture][org-capture]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-server][org-roam-server]]
  - [[#org-re-reveal][org-re-reveal]]
  - [[#simplenote][simplenote]]
  - [[#deft][deft]]

* about
** doom emacs
[[https://github.com/hlissner/doom-emacs][doom-emacs]] github repo

** notes
- [[file:config.el][config.el]] is generated from [[file:config.org][config.org]] by enabling =literate= flag in [[file:init.el][init.el]]

** files
- [[file:config.org][config.org]] (this file) contains various configurations
- [[file:init.el][init.el]] specifies the modules doom loads
- [[file:packages.el][packages.el]] specifies the additional packages you would install

* common
** variables and functions for org files
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/Nextcloud/org/")
(defvar +org-life-file (expand-file-name "life.org" org-directory)
  "The org file for life.")
(defvar +org-daily-file (expand-file-name "daily.org" org-directory)
  "The org file for daily.")
(defvar +org-goals-file (expand-file-name "goals.org" org-directory)
  "The org file for goals.")
(defvar +org-journal-file (expand-file-name "journal.org" org-directory)
  "The org file for journal.")
(defvar +org-people-file (expand-file-name "people.org" org-directory)
  "The org file for people.")
(defvar +org-reflect-file (expand-file-name "reflect.org" org-directory)
  "The org file for reflect.")
(defvar +org-knowledge-base-dir (expand-file-name "knowledge-base/" org-directory)
  "The org-roam directory for knowledge.")
#+end_src

#+RESULTS:
: +org-knowledge-base-dir

** user name and email
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Alex Lai"
      user-mail-address "alex@alexlai.xyz")
#+end_src

** line number
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

** hooks
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'after-init-hook #'global-emojify-mode)
#+end_src

** TeX engine (using xetex)
#+begin_src emacs-lisp :tangle yes
(setq-default TeX-engine 'xetex)
(setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
                              "xelatex -interaction nonstopmode %f"))
#+end_src


** org what programs to open file
#+begin_src emacs-lisp :tangle yes
;; open apps
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . "firefox %s")
        ("\\.pdf\\'" . default)
        ("\\.png\\'" . "sxiv \"%s\"" )
        ("\\.jpg\\'" . "sxiv \"%s\"" )
        ("\\.svg\\'" . "sxiv \"%s\"" )
        ("\\.gif\\'" . "mpv \"%s\""  )
        ("\\.mkv\\'" . "mpv \"%s\""  )
        ("\\.mp3\\'" . "mpv \"%s\""  )
        ("\\.mp4\\'" . "mpv \"%s\""  )
        ))
#+end_src
** org todo-keywords, faces
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq
   org-todo-keywords
   '((sequence "TODO(t)" "DOING(i!)"  "|" "DONE(d!)" "KILL(k!)" )
     (sequence "MOVED(m@/!)" "CANCELED(c@)" "|"))
   org-todo-keyword-faces
   '(("DOING" . "green")
     ("MOVED" . "brown")
     ("KILL" . "grey")
     ("CANCELED" . (:foreground "blue" :weight bold))
     )))
#+end_src

* UI
** font
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "DejaVuSansMono" :size 14))
#+end_src

** theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-nord)
#+end_src

* packages
- functions
  - `load!' for loading external *.el files relative to this one
  - `use-package' for configuring packages
  - `after!' for running code after a package has loaded
  - `add-load-path!' for adding directories to the `load-path', relative to
    this file. Emacs searches the `load-path' when you load packages with
    `require' or `use-package'.
  - `map!' for binding new keys
   
** org-capture
#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (setq org-capture-templates
        '(
          ("d" "daily" entry
           (file+olp+datetree +org-daily-file)
           "* TODO %?\n%i\n%a" :prepend t)
          ("l" "life" entry
           (file+headline +org-life-file "Unfiled")
           "* %?\nCAPTURED: %U\n%i\n%a" :prepend t)
          ("t" "todo(life)" entry
           (file+headline +org-life-file "Unfiled")
           "* TODO %?\nCAPTURED: %U\n%i\n%a" :prepend t)
          ("j" "journal" entry
           (file+olp+datetree +org-journal-file)
           "* %U %?\n%i\n%a")
          ("r" "reflect" entry
           (file+olp+datetree +org-reflect-file)
           "* %U %?\n%i\n%a")
          )
        )
  )
#+end_src

#+RESULTS:
| d | daily | entry | (file+olp+datetree +org-daily-file) | * TODO %? |

** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory +org-knowledge-base-dir))
#+end_src

** org-roam-server
#+begin_src emacs-lisp :tangle yes
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20))
#+end_src

** org-re-reveal
#+begin_src emacs-lisp :tangle yes
(use-package org-re-reveal
  :ensure t
  :config
  (setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+end_src

#+RESULTS:
: http://cdn.jsdelivr.net/reveal.js/3.0.0/

** simplenote
#+begin_src emacs-lisp :tangle yes
(require 'simplenote2)
(load! "simplenote.el")
(simplenote2-setup)
(map! :leader
      (:prefix-map ("S" . "simplenote")
       :desc "browse" "b" 'simplenote2-browse
       :desc "new-from-buffer" "n" 'simplenote2-create-note-from-buffer
       :desc "sync" "s" 'simplenote2-sync-notes
       )
      )
(use-package simplenote2
  :config
  (setq simplenote2-markdown-notes-mode 'markdown-mode
        simplenote2-notes-mode 'markdown-mode
        )
  )
#+end_src

#+RESULTS:
: t

(use-package simplenote2
  :ensure t
  :config
  (load-file "~/.config/doom/simplenote.el")
  (simplenote2-setup)
  )

** deft
#+begin_src emacs-lisp :tangle yes
(after! deft
  (setq deft-directory +org-knowledge-base-dir)
  )
#+end_src

#+RESULTS:
